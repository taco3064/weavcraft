name: CD Production

on:
  pull_request_target:
    branches:
      - production
    types:
      - closed

jobs:
  get-version:
    name: Get the latest version
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: actions
    outputs:
      latest: ${{ steps.version.outputs.current-version }}
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Initialization
        id: init
        run: |
          git config --global user.email "${{ secrets.USEWR_EMAIL }}"
          git config --global user.name "Taco Chang"

      - name: Update Version
        run: |
          npx standard-version --skip.tag
          git push origin HEAD:production -f

      - name: Get Package Version
        id: version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

  get-affected-projects:
    name: Get affected projects
    if: github.event.pull_request.merged == true
    needs: get-version
    uses: ./.github/workflows/affected-projects.yml
    with:
      main_branch_name: production
    secrets:
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}

  release-tag:
    name: Publish libs
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: actions
    needs:
      - get-version
      - get-affected-projects
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Pull project
        run: |
          git config --global user.email "${{ secrets.USEWR_EMAIL }}"
          git config --global user.name "Taco Chang"
          git pull

      - name: Release Tag
        run: |
          git tag \
            -f \
            -a "v${{ needs.get-version.outputs.latest }}" \
            -m "${{ needs.get-affected-projects.outputs.list }}"

          git push --tags origin HEAD:production

  publish-libs:
    name: Publish @weavcraft libs to NPM
    if: needs.get-affected-projects.outputs.core == '1'
    uses: ./.github/workflows/publish-libs.yml
    with:
      version: ${{ needs.get-version.outputs.latest }}
    needs:
      - get-version
      - get-affected-projects

  deploy-api:
    name: Deploy api with K8s
    if: needs.get-affected-projects.outputs.api == '1'
    uses: royfuwei/rf-devops/.github/workflows/weavcraft-deploy-k8s.yml@main
    needs:
      - get-version
      - get-affected-projects
    with:
      appVersion: ${{ needs.get-version.outputs.latest }}
      helmVersion: ${{ needs.get-version.outputs.latest }}
      environment: k8s-weavcraft
    secrets:
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      HARBOR_HOST: ${{ secrets.HARBOR_HOST }}
      HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
      HARBOR_TOKEN: ${{ secrets.HARBOR_TOKEN }}
      ENV_DB_MONGO_URI: ${{ secrets.ENV_DB_MONGO_URI }}
      ENV_PUBLIC_SUPABASE_URL: ${{ secrets.ENV_PUBLIC_SUPABASE_URL }}
      ENV_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.ENV_PUBLIC_SUPABASE_ANON_KEY }}
      ENV_JWT_SECRET: ${{ secrets.ENV_JWT_SECRET }}
      ENV_JWT_EXPIRES_IN: ${{ secrets.ENV_JWT_EXPIRES_IN }}

  deploy-web:
    name: Deploy web to Vercel
    if: needs.get-affected-projects.outputs.web == '1'
    runs-on: ubuntu-latest
    environment: actions
    needs:
      - get-version
      - get-affected-projects

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GIT_TOKEN }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-project-name: web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_SCOPE }}
